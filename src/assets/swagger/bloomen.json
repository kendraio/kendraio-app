{
  "info": {
    "description": "The Bloomen Platform documentation",
    "title": "Bloomen Platform",
    "version": "0.3.0"
  },
  "host": "bloomen.herokuapp.com",
  "basePath": "/",
  "produces": ["application/json"],
  "schemes": ["https"],
  "securityDefinitions": {
    "JWT": {
      "type": "apiKey",
      "in": "header",
      "name": "Authorization",
      "description": "Publisher:\nBearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VyIjp7InJvbGUiOiJwdWJsaXNoZXIiLCJyZXB1dGF0aW9uIjp7InBvc2l0aXZlIjowLCJuZWdhdGl2ZSI6MH0sInNldHRpbmdzIjp7ImF0dHJpYnV0aW9uIjp0cnVlfSwia3ljIjp7ImFkZHJlc3MiOiIiLCJwaG9uZSI6IiIsImZpcnN0bmFtZSI6IiIsImxhc3RuYW1lIjoiIiwiaWQxIjoiIiwiaWQyIjoiIiwic3RhdHVzIjowLCJyZXZpZXdlZEJ5IjoiIn0sIl9pZCI6IjViYjQ5MDI5NGRkN2ExMmNhYzQxYTU3NSIsInVzZXJuYW1lIjoicHVibGlzaGVyIiwiaGFzaCI6IjUyYWRlZDE2NTM2MDM1MmEwZjU4NTc1NzFkOTZkNjhmIiwiZW1haWwiOiJwdWJsaXNoZXJAYXRjLmdyIiwib3JnYW5pc2F0aW9uIjoiQVRDIiwiY3JlYXRlZEF0VVRDIjoiMjAxOC0xMC0wM1QwOTo0NzoyMS4zMDlaIiwiX192IjowLCJvcmciOm51bGwsImlkIjoiNWJiNDkwMjk0ZGQ3YTEyY2FjNDFhNTc1In0sImlhdCI6MTU1MDU4MTk0Nn0.jxCWK2avRtvmuh0rdeg8z0iu1sG4JaBfkI_gZDNx1Co\nPhotographer:\nBearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VyIjp7InJvbGUiOiJwaG90b2dyYXBoZXIiLCJyZXB1dGF0aW9uIjp7InBvc2l0aXZlIjo3LCJuZWdhdGl2ZSI6MH0sInNldHRpbmdzIjp7ImF0dHJpYnV0aW9uIjp0cnVlfSwia3ljIjp7ImFkZHJlc3MiOiIiLCJwaG9uZSI6IiIsImZpcnN0bmFtZSI6IiIsImxhc3RuYW1lIjoiIiwiaWQxIjoiIiwiaWQyIjoiIiwic3RhdHVzIjowLCJyZXZpZXdlZEJ5IjoiIn0sIl9pZCI6IjViYjM1ZmE2ZWIwNDMxMWE1YzYwNjA0MCIsInVzZXJuYW1lIjoicGhvdG9ncmFwaGVyIiwiaGFzaCI6ImFiNWIwMzgxN2NhYTAxYzRhMmEwZWFkY2ZlNjQ4NjljIiwiZW1haWwiOiJwaG90b2dyYXBoZXJAdGVzdC5jb20iLCJvcmdhbmlzYXRpb24iOiJwaG90b2dyYXBoZXIiLCJjcmVhdGVkQXRVVEMiOiIyMDE4LTEwLTAyVDEyOjA4OjA2LjEyMloiLCJfX3YiOjB9LCJpYXQiOjE1NTA1MDM2NTR9.LThaEsPkrDkvlvKMw276PHlEsl430yNDAPATFi9sNw8"
    }
  },
  "security": {
    "JWT": []
  },
  "swagger": "2.0",
  "paths": {
    "/auth/login": {
      "post": {
        "parameters": [
          {
            "name": "credentials",
            "in": "body",
            "description": "Login info",
            "required": true,
            "schema": {
              "$ref": "#/definitions/LoginDTO"
            }
          }
        ],
        "description": "User login, returns JWT token.",
        "tags": ["authentication"],
        "responses": {
          "200": {
            "description": "JWT token",
            "schema": {
              "$ref": "#/definitions/JwtDTO"
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "500": {
            "description": "Unexpected"
          }
        }
      }
    },
    "/auth/register": {
      "post": {
        "parameters": [
          {
            "name": "data",
            "in": "body",
            "description": "Register info",
            "required": true,
            "schema": {
              "$ref": "#/definitions/RegisterDTO"
            }
          }
        ],
        "description": "User registration, returns JWT token.",
        "tags": ["authentication"],
        "responses": {
          "200": {
            "description": "JWT token",
            "schema": {
              "$ref": "#/definitions/JwtDTO"
            }
          },
          "400": {
            "description": "Invalid Invitation"
          },
          "500": {
            "description": "Unexpected"
          }
        }
      }
    },
    "/auth/forgot": {
      "post": {
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "description": "User email",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ForgotDTO"
            }
          }
        ],
        "description": "Forgot password, resets password and sends email to user to reset it.",
        "tags": ["authentication"],
        "responses": {
          "200": {
            "description": "Response message",
            "schema": {
              "$ref": "#/definitions/MessageDTO"
            }
          },
          "404": {
            "description": "User not found"
          },
          "500": {
            "description": "Unexpected"
          }
        }
      }
    },
    "/invitations": {
      "get": {
        "parameters": [],
        "description": "Get all invitations of my organisation",
        "tags": ["invitation"],
        "responses": {
          "200": {
            "description": "An array of sent invitations",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Invitation"
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "User is not a publisher"
          },
          "500": {
            "description": "Unexpected"
          }
        },
        "security": [
          {
            "JWT": []
          }
        ]
      },
      "post": {
        "parameters": [
          {
            "name": "data",
            "in": "body",
            "description": "Invitation info",
            "required": true,
            "schema": {
              "$ref": "#/definitions/InvitationDTO"
            }
          }
        ],
        "description": "Invite new user to my organisation",
        "tags": ["invitation"],
        "responses": {
          "200": {
            "description": "New invitation",
            "schema": {
              "$ref": "#/definitions/Invitation"
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "User is not a publisher"
          },
          "500": {
            "description": "Unexpected"
          }
        },
        "security": [
          {
            "JWT": []
          }
        ]
      }
    },
    "/me": {
      "get": {
        "parameters": [],
        "description": "Logged in user (with KYC info)",
        "tags": ["me"],
        "responses": {
          "200": {
            "description": "Logged in user",
            "schema": {
              "$ref": "#/definitions/User"
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "500": {
            "description": "Unexpected"
          }
        },
        "security": [
          {
            "JWT": []
          }
        ]
      },
      "put": {
        "parameters": [
          {
            "name": "data",
            "in": "body",
            "description": "Updated user info",
            "required": true,
            "schema": {
              "$ref": "#/definitions/UpdateUserDTO"
            }
          }
        ],
        "description": "Update user profile",
        "tags": ["me"],
        "responses": {
          "200": {
            "description": "Updated user",
            "schema": {
              "$ref": "#/definitions/User"
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "500": {
            "description": "Unexpected"
          }
        },
        "security": [
          {
            "JWT": []
          }
        ]
      }
    },
    "/me/password": {
      "put": {
        "parameters": [
          {
            "name": "data",
            "in": "body",
            "description": "Old and new password",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ChangePasswordDTO"
            }
          }
        ],
        "description": "Update user password",
        "tags": ["me"],
        "responses": {
          "200": {
            "description": "Success message",
            "schema": {
              "$ref": "#/definitions/MessageDTO"
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "500": {
            "description": "Unexpected"
          }
        },
        "security": [
          {
            "JWT": []
          }
        ]
      }
    },
    "/me/photos": {
      "get": {
        "parameters": [],
        "description": "Photos where user has rights, or is owner of",
        "tags": ["me"],
        "responses": {
          "200": {
            "description": "Array of photos",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Media"
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "500": {
            "description": "Unexpected"
          }
        },
        "security": [
          {
            "JWT": []
          }
        ]
      }
    },
    "/me/organisation": {
      "get": {
        "parameters": [],
        "description": "Returns user's organisation",
        "tags": ["me"],
        "responses": {
          "200": {
            "description": "User's organisation",
            "schema": {
              "$ref": "#/definitions/Organisation"
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "500": {
            "description": "Unexpected"
          }
        },
        "security": [
          {
            "JWT": []
          }
        ]
      }
    },
    "/organisations/{organisation}": {
      "get": {
        "parameters": [
          {
            "name": "organisation",
            "in": "path",
            "description": "Organisation name",
            "required": true,
            "type": "string"
          }
        ],
        "description": "Get organisation with wallet balance",
        "tags": ["organisations"],
        "responses": {
          "200": {
            "description": "Organisation info with balance",
            "schema": {
              "$ref": "#/definitions/OrganisationDTO"
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Organisation not found"
          },
          "500": {
            "description": "Unexpected"
          }
        },
        "security": [
          {
            "JWT": []
          }
        ]
      }
    },
    "/photos": {
      "get": {
        "parameters": [
          {
            "name": "before",
            "in": "query",
            "description": "Optional - used for pagination. Gets all photos with createdAtUTC before given timestamp",
            "required": false,
            "type": "string"
          }
        ],
        "description": "Returns all photos",
        "tags": ["photos"],
        "responses": {
          "200": {
            "description": "An array of photos",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Media"
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "500": {
            "description": "Unexpected"
          }
        },
        "security": [
          {
            "JWT": []
          }
        ]
      },
      "post": {
        "parameters": [
          {
            "name": "photo",
            "in": "body",
            "description": "New photo info",
            "required": true,
            "schema": {
              "$ref": "#/definitions/UploadPhotoDTO"
            }
          }
        ],
        "description": "Upload a new photo",
        "tags": ["photos"],
        "responses": {
          "200": {
            "description": "The uploaded photo and the blockchain transaction"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "500": {
            "description": "Unexpected"
          }
        },
        "security": [
          {
            "JWT": []
          }
        ]
      }
    },
    "/photos/{hash}": {
      "get": {
        "parameters": [
          {
            "name": "hash",
            "in": "path",
            "description": "Unique hash of the photo",
            "required": true,
            "type": "string"
          }
        ],
        "description": "Returns a photo by its hash",
        "tags": ["photos"],
        "responses": {
          "200": {
            "description": "A single photo"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Photo not found"
          },
          "500": {
            "description": "Unexpected"
          }
        },
        "security": [
          {
            "JWT": []
          }
        ]
      },
      "put": {
        "parameters": [
          {
            "name": "hash",
            "in": "path",
            "description": "Unique hash of the photo",
            "required": true,
            "type": "string"
          },
          {
            "name": "photo",
            "in": "body",
            "description": "Updated photo fields",
            "required": true,
            "schema": {
              "$ref": "#/definitions/UpdatePhotoDTO"
            }
          }
        ],
        "description": "Updates a photo by its hash",
        "tags": ["photos"],
        "responses": {
          "200": {
            "description": "Updated photo"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Only photo owner can update photo info"
          },
          "404": {
            "description": "Photo not found"
          },
          "500": {
            "description": "Unexpected"
          }
        },
        "security": [
          {
            "JWT": []
          }
        ]
      }
    },
    "/photos/comparison/{hash}": {
      "get": {
        "parameters": [
          {
            "name": "hash",
            "in": "path",
            "description": "Unique hash of the photo",
            "required": true,
            "type": "string"
          }
        ],
        "description": "Returns a comparison of aws and db hash",
        "tags": ["photos"],
        "responses": {
          "200": {
            "description": "A single photo"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Photo not found"
          },
          "500": {
            "description": "Unexpected"
          }
        },
        "security": [
          {
            "JWT": []
          }
        ]
      }
    },
    "/photos/{hash}/pay": {
      "put": {
        "parameters": [
          {
            "name": "hash",
            "in": "path",
            "description": "Unique hash of the photo",
            "required": true,
            "type": "string"
          }
        ],
        "description": "Pay for a photo",
        "tags": ["photos"],
        "responses": {
          "200": {
            "description": "The photo and the blockchain transaction"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Only ppublisher can pay for photo"
          },
          "404": {
            "description": "Photo not found"
          },
          "500": {
            "description": "Unexpected"
          }
        },
        "security": [
          {
            "JWT": []
          }
        ]
      }
    },
    "/photos/search": {
      "post": {
        "parameters": [
          {
            "name": "before",
            "in": "query",
            "description": "Optional - used for pagination. Gets photos with createdAtUTC before given timestamp",
            "required": false,
            "type": "string"
          },
          {
            "name": "search",
            "in": "body",
            "description": "Search term",
            "required": true,
            "schema": {
              "$ref": "#/definitions/SearchPhotoDTO"
            }
          }
        ],
        "description": "Search for photos",
        "tags": ["photos"],
        "responses": {
          "200": {
            "description": "An array of photos"
          },
          "401": {
            "description": "Unauthorized"
          },
          "500": {
            "description": "Unexpected"
          }
        },
        "security": [
          {
            "JWT": []
          }
        ]
      }
    },
    "/transactions": {
      "get": {
        "parameters": [
          {
            "name": "before",
            "in": "query",
            "description": "Optional - used for pagination. Gets all transactions with createdAtUTC before given timestamp",
            "required": false,
            "type": "string"
          }
        ],
        "description": "Get all transactions",
        "tags": ["transactions"],
        "responses": {
          "200": {
            "description": "An array of transactions",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Transaction"
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "500": {
            "description": "Unexpected"
          }
        },
        "security": [
          {
            "JWT": []
          }
        ]
      }
    },
    "/transactions/photo/{hash}": {
      "get": {
        "parameters": [
          {
            "name": "hash",
            "in": "path",
            "description": "Unique hash of the photo",
            "required": true,
            "type": "string"
          },
          {
            "name": "before",
            "in": "query",
            "description": "Optional - used for pagination. Gets all transactions with createdAtUTC before given timestamp",
            "required": false,
            "type": "string"
          }
        ],
        "description": "Get all transactions for photo",
        "tags": ["transactions"],
        "responses": {
          "200": {
            "description": "An array of transactions",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Transaction"
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "500": {
            "description": "Unexpected"
          }
        },
        "security": [
          {
            "JWT": []
          }
        ]
      }
    },
    "/transactions/me": {
      "get": {
        "parameters": [
          {
            "name": "before",
            "in": "query",
            "description": "Optional - used for pagination. Gets all transactions with createdAtUTC before given timestamp",
            "required": false,
            "type": "string"
          }
        ],
        "description": "Get all transactions for photo",
        "tags": ["transactions"],
        "responses": {
          "200": {
            "description": "An array of transactions",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Transaction"
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "500": {
            "description": "Unexpected"
          }
        },
        "security": [
          {
            "JWT": []
          }
        ]
      }
    },
    "/transactions/check": {
      "get": {
        "parameters": [
          {
            "name": "before",
            "in": "transaction",
            "description": "Transaction hash to check",
            "required": true,
            "type": "string"
          }
        ],
        "description": "Check transaction status in the blockchain",
        "tags": ["transactions"],
        "responses": {
          "200": {
            "description": "Transaction status object"
          },
          "401": {
            "description": "Unauthorized"
          },
          "500": {
            "description": "Unexpected"
          }
        },
        "security": [
          {
            "JWT": []
          }
        ]
      }
    },
    "/users": {
      "get": {
        "parameters": [],
        "description": "Get all approved users",
        "tags": ["users"],
        "responses": {
          "200": {
            "description": "An array of users",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/User"
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "User is not a publisher"
          },
          "500": {
            "description": "Unexpected"
          }
        },
        "security": [
          {
            "JWT": []
          }
        ]
      }
    },
    "/users/kyc": {
      "get": {
        "parameters": [],
        "description": "Get all users with KYC requests",
        "tags": ["users"],
        "responses": {
          "200": {
            "description": "An array of users",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/User"
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "User is not a publisher"
          },
          "500": {
            "description": "Unexpected"
          }
        },
        "security": [
          {
            "JWT": []
          }
        ]
      }
    },
    "/users/{hash}/kyc": {
      "get": {
        "parameters": [
          {
            "name": "hash",
            "in": "path",
            "description": "Unique hash of the user",
            "required": true,
            "type": "string"
          }
        ],
        "description": "Get user's KYC request",
        "tags": ["users"],
        "responses": {
          "200": {
            "description": "Requested user"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "User is not a publisher"
          },
          "500": {
            "description": "Unexpected"
          }
        },
        "security": [
          {
            "JWT": []
          }
        ]
      },
      "put": {
        "parameters": [
          {
            "name": "hash",
            "in": "path",
            "description": "Unique hash of the user",
            "required": true,
            "type": "string"
          },
          {
            "name": "data",
            "in": "body",
            "description": "KYC approval",
            "required": true,
            "schema": {
              "$ref": "#/definitions/KYCApprovalDTO"
            }
          }
        ],
        "description": "Review user's KYC request",
        "tags": ["users"],
        "responses": {
          "200": {
            "description": "Requested user"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "User is not a publisher"
          },
          "500": {
            "description": "Unexpected"
          }
        },
        "security": [
          {
            "JWT": []
          }
        ]
      }
    },
    "/users/{hash}/vote": {
      "put": {
        "parameters": [
          {
            "name": "hash",
            "in": "path",
            "description": "Unique hash of the user",
            "required": true,
            "type": "string"
          },
          {
            "name": "vote",
            "in": "body",
            "description": "Vote object",
            "required": true,
            "schema": {
              "$ref": "#/definitions/VoteDTO"
            }
          }
        ],
        "description": "Vote photographer",
        "tags": ["users"],
        "responses": {
          "200": {
            "description": "Voted user"
          },
          "401": {
            "description": "Unauthorized"
          },
          "500": {
            "description": "Unexpected"
          }
        },
        "security": [
          {
            "JWT": []
          }
        ]
      }
    },
    "/wallet/send": {
      "get": {
        "parameters": [
          {
            "name": "data",
            "in": "body",
            "description": "Transaction info",
            "required": true,
            "schema": {
              "$ref": "#/definitions/SendTokensDTO"
            }
          }
        ],
        "description": "Send funds to another user",
        "tags": ["wallet"],
        "responses": {
          "200": {
            "description": "Blockchain response"
          },
          "401": {
            "description": "Unauthorized"
          },
          "500": {
            "description": "Unexpected"
          }
        },
        "security": [
          {
            "JWT": []
          }
        ]
      }
    },
    "/wallet/mnemonic": {
      "get": {
        "parameters": [],
        "description": "Create new mnemonic wallet",
        "tags": ["wallet"],
        "responses": {
          "200": {
            "description": "Newly created wallet"
          },
          "401": {
            "description": "Unauthorized"
          },
          "500": {
            "description": "Unexpected"
          }
        },
        "security": [
          {
            "JWT": []
          }
        ]
      }
    }
  },
  "definitions": {
    "Invitation": {
      "required": ["organisation", "email", "accepted"],
      "properties": {
        "organisation": {
          "type": "string",
          "description": "Organisation name where the user is invited in"
        },
        "email": {
          "type": "string",
          "description": "User email where invitation is sent"
        },
        "accepted": {
          "type": "boolean",
          "description": "User accepted the invitation, default: false"
        },
        "user": {
          "$ref": "#/definitions/User"
        },
        "invitedBy": {
          "$ref": "#/definitions/User"
        },
        "createdAtUTC": {
          "type": "string",
          "description": "When invitation was sent"
        }
      }
    },
    "Media": {
      "required": ["url", "hash"],
      "properties": {
        "url": {
          "type": "string",
          "description": "The media file URL"
        },
        "description": {
          "type": "string",
          "description": "Description of the media resource"
        },
        "keywords": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "hash": {
          "type": "string",
          "description": "Unique hash of the media resource"
        },
        "type": {
          "type": "string",
          "description": "Description of the resource, default is \"photo\""
        },
        "price": {
          "type": "integer",
          "description": "Price of the media resource, default is 0"
        },
        "attribution": {
          "type": "boolean",
          "description": "Uploader wants credit for media resource usage"
        },
        "owner": {
          "type": "string",
          "description": "Hash of media resource owner"
        },
        "rights": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "rightsTime": {
          "type": "string",
          "description": "Usage rights time (how long?)"
        },
        "rightsRegion": {
          "type": "string",
          "description": "Usage rights region (where in the world?)"
        },
        "analytics": {
          "type": "object",
          "description": "Not sure if this will be updated here, maybe different table for analytics"
        },
        "geo": {
          "type": "object",
          "description": "Geo coordinates"
        },
        "createdAtUTC": {
          "type": "string",
          "description": "When media resource was uploaded (type: Date)"
        }
      }
    },
    "Organisation": {
      "required": ["name", "hash", "walletAddress"],
      "properties": {
        "name": {
          "type": "string",
          "description": "Organisation name"
        },
        "hash": {
          "type": "string",
          "description": "Organisation hash"
        },
        "walletAddress": {
          "type": "object",
          "description": "Wallet address of the organisation"
        }
      }
    },
    "Transaction": {
      "required": ["hash"],
      "properties": {
        "hash": {
          "type": "string",
          "description": "Transaction hash"
        },
        "type": {
          "type": "string",
          "description": "Transaction type, \"upload\" or \"payment\""
        },
        "mediaHash": {
          "type": "string",
          "description": "Hash of the media saved in DB"
        },
        "mediaId": {
          "type": "integer",
          "description": "Photo id saved in blockchain"
        },
        "payment": {
          "type": "number",
          "description": "Amount paid for media rights, default: 0"
        },
        "userHash": {
          "type": "string",
          "description": "User hash that initiated the transaction"
        },
        "receiverHash": {
          "type": "string",
          "description": "User hash that received the transaction"
        },
        "createdAtUTC": {
          "type": "string",
          "description": "When transaction was made"
        }
      }
    },
    "User": {
      "required": ["username", "hash", "password", "kyc"],
      "properties": {
        "username": {
          "type": "string",
          "description": "Username"
        },
        "hash": {
          "type": "string",
          "description": "Unique hash of the user"
        },
        "password": {
          "type": "string",
          "description": "Password"
        },
        "email": {
          "type": "string",
          "description": "Email"
        },
        "role": {
          "type": "Array",
          "description": "Role of the user, default: \"photographer\""
        },
        "organisation": {
          "type": "string",
          "description": "User organisation, if user if photographer this is the same as the username"
        },
        "reputation": {
          "$ref": "#/definitions/reputation"
        },
        "settings": {
          "type": "object",
          "description": "User settings"
        },
        "kyc": {
          "$ref": "#/definitions/kyc"
        },
        "createdAtUTC": {
          "type": "string",
          "description": "When user first registered"
        }
      }
    },
    "reputation": {
      "required": null,
      "properties": {
        "positive": {
          "type": "integer",
          "description": "Upvotes"
        },
        "negative": {
          "type": "integer",
          "description": "Downvotes"
        }
      }
    },
    "kyc": {
      "required": null,
      "properties": {
        "address": {
          "type": "string",
          "description": "Physical address"
        },
        "phone": {
          "type": "string",
          "description": "Phone number"
        },
        "firstname": {
          "type": "string",
          "description": "Legal firstname"
        },
        "lastname": {
          "type": "string",
          "description": "Legal lastname"
        },
        "id1": {
          "type": "string",
          "description": "ID photo"
        },
        "id2": {
          "type": "string",
          "description": "ID photo"
        },
        "status": {
          "type": "string",
          "description": "0: not uploaded, 1: uploaded, 2: declined, 3: approved"
        },
        "reviewedBy": {
          "type": "string",
          "description": "Hash of user that did the last status update (for statuses 2 or 3)"
        }
      }
    },
    "LoginDTO": {
      "required": ["username", "password"],
      "properties": {
        "username": {
          "type": "string",
          "description": "Username"
        },
        "password": {
          "type": "string",
          "description": "Password"
        }
      }
    },
    "RegisterDTO": {
      "required": ["username", "password", "email"],
      "properties": {
        "username": {
          "type": "string",
          "description": "Username"
        },
        "password": {
          "type": "string",
          "description": "Password"
        },
        "email": {
          "type": "string",
          "description": "Email"
        },
        "invitation": {
          "type": "string",
          "description": "Optional - invitation ID, only for publishers"
        }
      }
    },
    "ForgotDTO": {
      "required": ["email"],
      "properties": {
        "email": {
          "type": "string",
          "description": "Email"
        }
      }
    },
    "JwtDTO": {
      "required": null,
      "properties": {
        "token": {
          "type": "string",
          "description": "JWT token"
        }
      }
    },
    "MessageDTO": {
      "required": ["message"],
      "properties": {
        "message": {
          "type": "string",
          "description": "Message"
        }
      }
    },
    "InvitationDTO": {
      "required": ["email"],
      "properties": {
        "email": {
          "type": "string",
          "description": "Email"
        }
      }
    },
    "ChangePasswordDTO": {
      "required": ["oldPassword", "newPassword"],
      "properties": {
        "oldPassword": {
          "type": "string",
          "description": "User's old password"
        },
        "newPassword": {
          "type": "string",
          "description": "User's new password"
        }
      }
    },
    "UpdateUserDTO": {
      "required": null,
      "properties": {
        "email": {
          "type": "string",
          "description": "User's updated email"
        },
        "settings": {
          "type": "object",
          "description": "User's updated settings"
        },
        "organisation": {
          "type": "string",
          "description": "User's updated organisation"
        }
      }
    },
    "OrganisationDTO": {
      "required": ["name", "hash", "walletAddress", "balance"],
      "properties": {
        "name": {
          "type": "string",
          "description": "Organisation name"
        },
        "hash": {
          "type": "string",
          "description": "Organisation hash"
        },
        "walletAddress": {
          "type": "object",
          "description": "Wallet address of the organisation"
        },
        "balance": {
          "type": "string",
          "description": "Wallet balance"
        }
      }
    },
    "UpdatePhotoDTO": {
      "required": null,
      "properties": {
        "description": {
          "type": "string",
          "description": "Description"
        },
        "keywords": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "type": {
          "type": "number",
          "description": "Resource price, default 0"
        },
        "rightsTime": {
          "type": "string",
          "description": "Rights time"
        },
        "rightsRegion": {
          "type": "string",
          "description": "Rights region"
        },
        "geo": {
          "type": "object",
          "description": "Geo coordinates"
        }
      }
    },
    "UploadhotoDTO": {
      "required": null,
      "properties": {
        "base64": {
          "type": "string",
          "description": "Base64 data of image"
        },
        "price": {
          "type": "number",
          "description": "Price to purchase rights"
        },
        "attribution": {
          "type": "boolean",
          "description": "Should the publisher mention the photographer on usage?"
        },
        "description": {
          "type": "string",
          "description": "Description"
        },
        "keywords": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "type": {
          "type": "number",
          "description": "Resource price, default 0"
        },
        "rightsTime": {
          "type": "string",
          "description": "Rights time"
        },
        "rightsRegion": {
          "type": "string",
          "description": "Rights region"
        },
        "geo": {
          "type": "object",
          "description": "Geo coordinates"
        }
      }
    },
    "SearchPhotoDTO": {
      "required": ["term"],
      "properties": {
        "term": {
          "type": "string",
          "description": "Term to search"
        }
      }
    },
    "SendTokensDTO": {
      "required": ["amount", "to"],
      "properties": {
        "amount": {
          "type": "string",
          "description": "Amount to send"
        },
        "to": {
          "type": "string",
          "description": "Wallet address to send the tokens to"
        }
      }
    },
    "KYCRequestDTO": {
      "required": null,
      "properties": {
        "address": {
          "type": "string",
          "description": "Address"
        },
        "phone": {
          "type": "string",
          "description": "Phone number"
        },
        "firstname": {
          "type": "string",
          "description": "Firstname"
        },
        "lastname": {
          "type": "string",
          "description": "Lastname"
        },
        "id1": {
          "type": "string",
          "description": "ID - front side"
        },
        "id2": {
          "type": "string",
          "description": "ID - back side"
        }
      }
    },
    "KYCApprovalDTO": {
      "required": null,
      "properties": {
        "approve": {
          "type": "boolean",
          "description": "KYC approved"
        }
      }
    },
    "VoteDTO": {
      "required": null,
      "properties": {
        "vote": {
          "type": "number",
          "description": "Vote (+1 or -1)"
        }
      }
    }
  },
  "responses": {},
  "parameters": {},
  "tags": [
    {
      "name": "authentication",
      "description": "User authentication"
    },
    {
      "name": "invitation",
      "description": "Invitations for publishers"
    },
    {
      "name": "me",
      "description": "Logged in user functions"
    },
    {
      "name": "organisations",
      "description": "Operations about organisations"
    },
    {
      "name": "photos",
      "description": "Operations about photos"
    },
    {
      "name": "transactions",
      "description": "Operations about transactions"
    },
    {
      "name": "users",
      "description": "Operations about users"
    },
    {
      "name": "wallet",
      "description": "Wallet functions"
    }
  ]
}
